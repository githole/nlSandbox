/** 
* ==========================================
* @brief FXAA
* ==========================================
*/

Texture2D tex:register(t0);

SamplerState smpl
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

// struct FxaaTex { SamplerState smpl; Texture2D tex; };

static const f3 mono = f3( 0.298912, 0.586611, 0.114478);

// !!! IMPORTANT !!!
// Modifyied RGB image version
// (original FXAA need Luminance info at Alpha color.

f4 FxaaTexTop(Texture2D t, f2 p)
{
	f4 c = t.SampleLevel(smpl, p, 0.0);
	c.a = dot(mono, c.rgb); // color to luminance
	return c;
}
f4 FxaaTexOff(Texture2D t, f2 p, int2 o, f2 r)
{
	f4 c = t.SampleLevel(smpl, p, 0.0, o);
	c.a = dot(mono, c.rgb); // color to luminance
	return c;
}


/**/
f4 fch(f2 uv)
{
    return tex.Sample(SMP_LINER,uv);
}
/**/
f4 main( ScreenVO input ):SV_Target0
{
	uint w,h,lvl;
	tex.GetDimensions(0,w,h,lvl);
	
/*
f4 FxaaPixelShader(
    // {xy} = center of pixel
    float2 pos,
    // {rgb_} = color in linear or perceptual color space
    // {___a} = luma in perceptual color space (not linear) 
    FxaaTex tex,
    // This must be from a constant/uniform.
    // {x_} = 1.0/screenWidthInPixels
    // {_y} = 1.0/screenHeightInPixels
    float2 rcpFrame
) */
	f2 rcpFrame = f2(1.0/w, 1.0/h);
	const f2 pos = input.uv;
    f2 posM = f2(pos.x, pos.y);
    f4 rgbyM = FxaaTexTop(tex, posM);
    f1 lumaS = FxaaTexOff(tex, posM, int2( 0, 1), rcpFrame.xy).w;
    f1 lumaE = FxaaTexOff(tex, posM, int2( 1, 0), rcpFrame.xy).w;
    f1 lumaN = FxaaTexOff(tex, posM, int2( 0,-1), rcpFrame.xy).w;
    f1 lumaW = FxaaTexOff(tex, posM, int2(-1, 0), rcpFrame.xy).w;
/*--------------------------------------------------------------------------*/
    f1 maxSM = max(lumaS, rgbyM.w);
    f1 minSM = min(lumaS, rgbyM.w);
    f1 maxESM = max(lumaE, maxSM); 
    f1 minESM = min(lumaE, minSM); 
    f1 maxWN = max(lumaN, lumaW);
    f1 minWN = min(lumaN, lumaW);
    f1 rangeMax = max(maxWN, maxESM);
    f1 rangeMin = min(minWN, minESM);
    f1 rangeMaxScaled = rangeMax * (1.0/8.0);
    f1 range = rangeMax - rangeMin;
    f1 rangeMaxClamped = max((1.0/12.0), rangeMaxScaled);
    bool earlyExit = range < rangeMaxClamped;
/*--------------------------------------------------------------------------*/
    if (earlyExit)
		return rgbyM;
	//return f4(1,0,0,1);
	//return rgbyM;
/*--------------------------------------------------------------------------*/
    f1 lumaNW = FxaaTexOff(tex, posM, int2(-1,-1), rcpFrame.xy).w;
    f1 lumaSE = FxaaTexOff(tex, posM, int2( 1, 1), rcpFrame.xy).w;
    f1 lumaNE = FxaaTexOff(tex, posM, int2( 1,-1), rcpFrame.xy).w;
    f1 lumaSW = FxaaTexOff(tex, posM, int2(-1, 1), rcpFrame.xy).w;
    
/*--------------------------------------------------------------------------*/
    f1 lumaNS = lumaN + lumaS;
    f1 lumaWE = lumaW + lumaE;
    f1 subpixRcpRange = 1.0/range;
    f1 subpixNSWE = lumaNS + lumaWE;
    f1 edgeHorz1 = (-2.0 * rgbyM.w) + lumaNS;
    f1 edgeVert1 = (-2.0 * rgbyM.w) + lumaWE;
/*--------------------------------------------------------------------------*/
    f1 lumaNESE = lumaNE + lumaSE;
    f1 lumaNWNE = lumaNW + lumaNE;
    f1 edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
    f1 edgeVert2 = (-2.0 * lumaN) + lumaNWNE;
/*--------------------------------------------------------------------------*/
    f1 lumaNWSW = lumaNW + lumaSW;
    f1 lumaSWSE = lumaSW + lumaSE;
    f1 edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
    f1 edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
    f1 edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
    f1 edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
    f1 edgeHorz = abs(edgeHorz3) + edgeHorz4;
    f1 edgeVert = abs(edgeVert3) + edgeVert4;
/*--------------------------------------------------------------------------*/
    f1 subpixNWSWNESE = lumaNWSW + lumaNESE; 
    f1 lengthSign = rcpFrame.x;
    bool horzSpan = edgeHorz >= edgeVert;
    f1 subpixA = subpixNSWE * 2.0 + subpixNWSWNESE; 
/*--------------------------------------------------------------------------*/
    if(!horzSpan) lumaN = lumaW; 
    if(!horzSpan) lumaS = lumaE;
    if(horzSpan) lengthSign = rcpFrame.y;
    f1 subpixB = (subpixA * (1.0/12.0)) - rgbyM.w;
/*--------------------------------------------------------------------------*/
    f1 gradientN = lumaN - rgbyM.w;
    f1 gradientS = lumaS - rgbyM.w;
    f1 lumaNN = lumaN + rgbyM.w;
    f1 lumaSS = lumaS + rgbyM.w;
    bool pairN = abs(gradientN) >= abs(gradientS);
    f1 gradient = max(abs(gradientN), abs(gradientS));
    if(pairN) lengthSign = -lengthSign;
    f1 subpixC = saturate(abs(subpixB) * subpixRcpRange);
/*--------------------------------------------------------------------------*/
    float2 posB;
    posB.x = posM.x;
    posB.y = posM.y;
    float2 offNP;
    offNP.x = (!horzSpan) ? 0.0 : rcpFrame.x;
    offNP.y = ( horzSpan) ? 0.0 : rcpFrame.y;
    if(!horzSpan) posB.x += lengthSign * 0.5;
    if( horzSpan) posB.y += lengthSign * 0.5;
/*--------------------------------------------------------------------------*/
    float2 posN;
    posN.x = posB.x - offNP.x;
    posN.y = posB.y - offNP.y;
    float2 posP;
    posP.x = posB.x + offNP.x;
    posP.y = posB.y + offNP.y;
    f1 subpixD = ((-2.0)*subpixC) + 3.0;
    f1 lumaEndN = FxaaTexTop(tex, posN).w;
    f1 subpixE = subpixC * subpixC;
    f1 lumaEndP = FxaaTexTop(tex, posP).w;
/*--------------------------------------------------------------------------*/
    if(!pairN) lumaNN = lumaSS;
    f1 gradientScaled = gradient * 1.0/4.0;
    f1 lumaMM = rgbyM.w - lumaNN * 0.5;
    f1 subpixF = subpixD * subpixE;
    bool lumaMLTZero = lumaMM < 0.0;
/*--------------------------------------------------------------------------*/
    lumaEndN -= lumaNN * 0.5;
    lumaEndP -= lumaNN * 0.5;
    bool doneN = abs(lumaEndN) >= gradientScaled;
    bool doneP = abs(lumaEndP) >= gradientScaled;
    if(!doneN) posN.x -= offNP.x * 1.5;
    if(!doneN) posN.y -= offNP.y * 1.5;
    bool doneNP = (!doneN) || (!doneP);
    if(!doneP) posP.x += offNP.x * 1.5;
    if(!doneP) posP.y += offNP.y * 1.5;
    if(doneNP) {
/*--------------------------------------------------------------------------*/
        if(!doneN) lumaEndN = FxaaTexTop(tex, posN.xy).w;
        if(!doneP) lumaEndP = FxaaTexTop(tex, posP.xy).w;
        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
        doneN = abs(lumaEndN) >= gradientScaled;
        doneP = abs(lumaEndP) >= gradientScaled;
        if(!doneN) posN.x -= offNP.x * 2.0;
        if(!doneN) posN.y -= offNP.y * 2.0;
        doneNP = (!doneN) || (!doneP);
        if(!doneP) posP.x += offNP.x * 2.0;
        if(!doneP) posP.y += offNP.y * 2.0;
        if(doneNP) {
/*--------------------------------------------------------------------------*/
            if(!doneN) lumaEndN = FxaaTexTop(tex, posN.xy).w;
            if(!doneP) lumaEndP = FxaaTexTop(tex, posP.xy).w;
            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
            doneN = abs(lumaEndN) >= gradientScaled;
            doneP = abs(lumaEndP) >= gradientScaled;
            if(!doneN) posN.x -= offNP.x * 2.0;
            if(!doneN) posN.y -= offNP.y * 2.0;
            doneNP = (!doneN) || (!doneP);
            if(!doneP) posP.x += offNP.x * 2.0;
            if(!doneP) posP.y += offNP.y * 2.0;
            if(doneNP) {
/*--------------------------------------------------------------------------*/
                if(!doneN) lumaEndN = FxaaTexTop(tex, posN.xy).w;
                if(!doneP) lumaEndP = FxaaTexTop(tex, posP.xy).w;
                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                doneN = abs(lumaEndN) >= gradientScaled;
                doneP = abs(lumaEndP) >= gradientScaled;
                if(!doneN) posN.x -= offNP.x * 4.0;
                if(!doneN) posN.y -= offNP.y * 4.0;
                doneNP = (!doneN) || (!doneP);
                if(!doneP) posP.x += offNP.x * 4.0;
                if(!doneP) posP.y += offNP.y * 4.0;
                if(doneNP) {
/*--------------------------------------------------------------------------*/
                    if(!doneN) lumaEndN = FxaaTexTop(tex, posN.xy).w;
                    if(!doneP) lumaEndP = FxaaTexTop(tex, posP.xy).w;
                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                    doneN = abs(lumaEndN) >= gradientScaled;
                    doneP = abs(lumaEndP) >= gradientScaled;
                    if(!doneN) posN.x -= offNP.x * 2.0;
                    if(!doneN) posN.y -= offNP.y * 2.0;
                    if(!doneP) posP.x += offNP.x * 2.0; 
                    if(!doneP) posP.y += offNP.y * 2.0; } } } }
/*--------------------------------------------------------------------------*/
    f1 dstN = posM.x - posN.x;
    f1 dstP = posP.x - posM.x;
    if(!horzSpan) dstN = posM.y - posN.y;
    if(!horzSpan) dstP = posP.y - posM.y;
/*--------------------------------------------------------------------------*/
    bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
    f1 spanLength = (dstP + dstN);
    bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
    f1 spanLengthRcp = 1.0/spanLength;
/*--------------------------------------------------------------------------*/
    bool directionN = dstN < dstP;
    f1 dst = min(dstN, dstP);
    bool goodSpan = directionN ? goodSpanN : goodSpanP;
    f1 subpixG = subpixF * subpixF;
    f1 pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
    f1 subpixH = subpixG * (3.0/4.0);
/*--------------------------------------------------------------------------*/
    f1 pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
    f1 pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;
    return FxaaTexTop(tex, posM);
}


